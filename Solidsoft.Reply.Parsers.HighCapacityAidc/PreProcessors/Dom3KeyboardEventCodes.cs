// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Dom3KeyboardEventCodes.cs" company="Solidsoft Reply Ltd">
// Copyright (c) 2018-2024 Solidsoft Reply Ltd. All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
// <summary>
// Pre-processor methods for DOM3 KeyboardEvent Code property values.
// </summary>
// -------------------------------------------------------------------------------------------------------------------

namespace Solidsoft.Reply.Parsers.HighCapacityAidc.PreProcessors;

using System.Text;
using System.Text.RegularExpressions;

using Newtonsoft.Json;

using Common;

/// <summary>
///   Pre-processor methods for DOM3 KeyboardEvent Code property values.
/// </summary>
// ReSharper disable once UnusedMember.Global
// ReSharper disable once UnusedType.Global
public static class Dom3KeyboardEventCodes {
    /// <summary>
    ///   Gets a dictionary of mappings from textual codes to numeric code values.
    /// </summary>
    public static IReadOnlyDictionary<string, (

            // The unmodified character.
            int code,

            // The shifted character.
            int shift,

            // The control character.
            int ctrl,

            // The alternative character.
            int alt,

            // The shift control character.
            int shiftCtrl,

            // The shift alternative character.
            int shiftAlt,

            // The alternative graph character.
            int altGr,

            // The shift alternative graph character.
            int shiftAltGr,

            // The shift control alternative character.
            int shiftCtrlAlt,

            // The control alternative character.
            int ctrlAlt,

            // The Caps Lock character.
            int capital,

            // The shift Caps Lock character.
            int shiftCapital,

            // The control Caps Lock character.
            int ctrlCapital,

            // The alternative Caps Lock character.
            int altCapital,

            // The shift control Caps Lock character.
            int shiftCtrlCapital,

            // The shift alternative Caps Lock character.
            int shiftAltCapital,

            // The alternative graph Caps Lock character.
            int altGrCapital,

            // The shift alternative graph Caps Lock character.
            int shiftAltGrCapital,

            // The shift control alternative Caps Lock character.
            int shiftCtrlAltCapital,

            // The control alternative Caps Lock character.
            int ctrlAltCapital)>
        KeyCodes { get; } = new Dictionary<string, (
        int code,
        int shift,
        int ctrl,
        int alt,
        int shiftCtrl,
        int shiftAlt,
        int altGr,
        int shiftAltGr,
        int shiftCtrlAlt,
        int ctrlAlt,
        int capital,
        int shiftCapital,
        int ctrlCapital,
        int altCapital,
        int shiftCtrlCapital,
        int shiftAltCapital,
        int altGrCapital,
        int shiftAltGrCapital,
        int shiftCtrlAltCapital,
        int ctrlAltCapital)>
    {
        {
            "Escape",
            (0x001B, 0x011B, 0x121B, 0x043B, 0x041B, 0x051B, 0x061B, 0x071B, 0x181B, 0x091B, 0x6000, 0x7000, 0x8000,
                0x9000, 0xA000, 0xB000, 0xC000, 0xD000, 0xD100, 0xD200)
        },
        {
            "Digit1",
            (0x0031, 0x0021, 0x0231, 0x0431, 0x0411, 0x0531, 0x00A1, 0x0721, 0x08A1, 0x0921, 0x6001, 0x7001, 0x8001,
                0x9001, 0xA001, 0xB001, 0xC001, 0xD001, 0xD101, 0xD201)
        },
        {
            "Digit2",
            (0x0032, 0x0040, 0x0240, 0x0440, 0x2400, 0x0540, 0x0622, 0x01B4, 0x1822, 0x19B4, 0x6002, 0x7002, 0x8002,
                0x9002, 0xA002, 0xB002, 0xC002, 0xD002, 0xD102, 0xD202)
        },
        {
            "Digit3",
            (0x0033, 0x0023, 0x0233, 0x0433, 0x0413, 0x0533, 0x0623, 0x0760, 0x1823, 0x0960, 0x6003, 0x7003, 0x8003,
                0x9003, 0xA003, 0xB003, 0xC003, 0xD003, 0xD103, 0xD203)
        },
        {
            "Digit4",
            (0x0034, 0x0024, 0x0234, 0x0434, 0x0414, 0x0534, 0x00A4, 0x00A3, 0x08A4, 0x09A3, 0x6004, 0x7004, 0x8004,
                0x9004, 0xA004, 0xB004, 0xC004, 0xD004, 0xD104, 0xD204)
        },
        {
            "Digit5",
            (0x0035, 0x0025, 0x0235, 0x0435, 0x0445, 0x0535, 0x20AC, 0x02DD, 0x28AC, 0x09DD, 0x6005, 0x7005, 0x8005,
                0x9005, 0xA005, 0xB005, 0xC005, 0xD005, 0xD105, 0xD205)
        },
        {
            "Digit6",
            (0x0036, 0x005E, 0x001E, 0x045E, 0x241E, 0x055E, 0x00BC, 0x02F5, 0x08BC, 0x09F5, 0x6006, 0x7006, 0x8006,
                0x9006, 0xA006, 0xB006, 0xC006, 0xD006, 0xD106, 0xD206)
        },
        {
            "Digit7",
            (0x0037, 0x0026, 0x0237, 0x0442, 0x0441, 0x0537, 0x00BD, 0xFF6C, 0x08BD, 0xF96C, 0x6007, 0x7007, 0x8007,
                0x9007, 0xA007, 0xB007, 0xC007, 0xD007, 0xD107, 0xD207)
        },
        {
            "Digit8",
            (0x0038, 0x002A, 0x0238, 0x0444, 0x0443, 0x0538, 0x00BE, 0x2014, 0x18BE, 0x2914, 0x6008, 0x7008, 0x8008,
                0x9008, 0xA008, 0xB008, 0xC008, 0xD008, 0xD108, 0xD208)
        },
        {
            "Digit9",
            (0x0039, 0x0028, 0x0239, 0x0447, 0x0446, 0x0539, 0x2018, 0x3039, 0x2818, 0x2939, 0x6009, 0x7009, 0x8009,
                0x9009, 0xA009, 0xB009, 0xC009, 0xD009, 0xD109, 0xD209)
        },
        {
            "Digit0",
            (0x0030, 0x0029, 0x0230, 0x0449, 0x0448, 0x0532, 0x2019, 0x303A, 0x2819, 0x293A, 0x600A, 0x700A, 0x800A,
                0x900A, 0xA00A, 0xB00A, 0xC00A, 0xD00A, 0xD10A, 0xD20A)
        },
        {
            "Minus",
            (0x002D, 0x005F, 0x001F, 0x042D, 0x241F, 0x052D, 0x01A5, 0x02DA, 0x08A5, 0x19DA, 0x600B, 0x700B, 0x800B,
                0x900B, 0xA00B, 0xB00B, 0xC00B, 0xD00B, 0xD10B, 0xD20B)
        },
        {
            "Equal",
            (0x003D, 0x002B, 0x023D, 0x043D, 0x233D, 0x053D, 0x00D7, 0x00F7, 0x18D7, 0x09F7, 0x600C, 0x700C, 0x800C,
                0x900C, 0xA00C, 0xB00C, 0xC00C, 0xD00C, 0xD10C, 0xD20C)
        },
        {
            // Because the Backspace key is universally used to enter backspace control characters, we have to compromise 
            // here and represent some key combinations as backspaces - specifically Shift-Backspace, Capital-Backspace and
            // Capital-Shift-Backspace.  These are generally reported as backspaces by keyboard layouts, and if we
            // don't enforce this convention, the calibration data cannot be parsed by the Calibrator.
            "Backspace",
            (0x0008, 0x0108, 0x0218, 0x0418, 0x0228, 0x0518, 0x0628, 0x0718, 0x1828, 0x0918, 0x600D, 0x700D, 0x800D,
                0x900D, 0xA00D, 0xB00D, 0xC00D, 0xD00D, 0xD10D, 0xD20D)
        },
        {
            // Because the Tab key is universally used to enter tab characters, we have to compromise here
            // and represent some key combinations as tabs - specifically Shift-Tab, Capital-Tab and
            // Capital-Shift-Tab.  These are generally reported as tabs by keyboard layouts, and if we
            // don't enforce this convention, the calibration data cannot be parsed by the Calibrator.
            "Tab",
            (0x0009, 0x0009, 0x0219, 0x0419, 0x0229, 0x0519, 0x0629, 0x0719, 0x1829, 0x0919, 0x0009, 0x0009, 0x800E,
                0x900E, 0xA00E, 0xB00E, 0xC00E, 0xD00E, 0xD10E, 0xD20E)
        },
        {
            "KeyQ",
            (0x0071, 0x0051, 0x0011, 0x0471, 0x2411, 0x0571, 0x00C4, 0x00E4, 0x18C4, 0x19E4, 0x600F, 0x700F, 0x800F,
                0x900F, 0xA00F, 0xB00F, 0xC00F, 0xD00F, 0xD10F, 0xD20F)
        },
        {
            "KeyW",
            (0x0077, 0x0057, 0x0017, 0x0477, 0x2417, 0x0577, 0x00C5, 0x00E5, 0x18C5, 0x19E5, 0x6010, 0x7010, 0x8010,
                0x9010, 0xA010, 0xB010, 0xC010, 0xD010, 0xD110, 0xD210)
        },
        {
            "KeyE",
            (0x0065, 0x0045, 0x0005, 0x0465, 0x2405, 0x0565, 0x00C9, 0x00E9, 0x18C9, 0x09E9, 0x6011, 0x7011, 0x8011,
                0x9011, 0xA011, 0xB011, 0xC011, 0xD011, 0xD111, 0xD211)
        },
        {
            "KeyR",
            (0x0072, 0x0052, 0x0012, 0x0472, 0x2412, 0x0572, 0x00AE, 0x0153, 0x08AE, 0x1953, 0x6012, 0x7012, 0x8012,
                0x9012, 0xA012, 0xB012, 0xC012, 0xD012, 0xD112, 0xD212)
        },
        {
            "KeyT",
            (0x0074, 0x0054, 0x0014, 0x0474, 0x2414, 0x0574, 0x00DE, 0x00FE, 0x18DE, 0x19FE, 0x6013, 0x7013, 0x8013,
                0x9013, 0xA013, 0xB013, 0xC013, 0xD013, 0xD113, 0xD213)
        },
        {
            "KeyY",
            (0x0079, 0x0059, 0x0019, 0x0479, 0x2419, 0x0579, 0x00DC, 0x00FC, 0x18DC, 0x09FC, 0x6014, 0x7014, 0x8014,
                0x9014, 0xA014, 0xB014, 0xC014, 0xD014, 0xD114, 0xD214)
        },
        {
            "KeyU",
            (0x0075, 0x0055, 0x0015, 0x0475, 0x2415, 0x0575, 0x00DA, 0x00FA, 0x18DA, 0x09FA, 0x6015, 0x7015, 0x8015,
                0x9015, 0xA015, 0xB015, 0xC015, 0xD015, 0xD115, 0xD215)
        },
        {
            "KeyI",
            (0x0069, 0x0049, 0x0209, 0x0469, 0x2409, 0x0569, 0x00CD, 0x00ED, 0x18CD, 0x09ED, 0x6016, 0x7016, 0x8016,
                0x9016, 0xA016, 0xB016, 0xC016, 0xD016, 0xD116, 0xD216)
        },
        {
            "KeyO",
            (0x006F, 0x004F, 0x000F, 0x046F, 0x240F, 0x056F, 0x00D3, 0x00F3, 0x18D3, 0x09F3, 0x6017, 0x7017, 0x8017,
                0x9017, 0xA017, 0xB017, 0xC017, 0xD017, 0xD117, 0xD217)
        },
        {
            "KeyP",
            (0x0070, 0x0050, 0x0010, 0x0470, 0x2410, 0x0570, 0x00D6, 0x00F6, 0x18D6, 0x09F6, 0x6018, 0x7018, 0x8018,
                0x9018, 0xA018, 0xB018, 0xC018, 0xD018, 0xD118, 0xD218)
        },
        {
            "BracketLeft",
            (0x005B, 0x007B, 0x021B, 0x045B, 0x241B, 0x055B, 0x00AB, 0x2011, 0x08AB, 0x2911, 0x6019, 0x7019, 0x8019,
                0x9019, 0xA019, 0xB019, 0xC019, 0xD019, 0xD119, 0xD219)
        },
        {
            "BracketRight",
            (0x005D, 0x007D, 0x001D, 0x045D, 0x241D, 0x055D, 0x00BB, 0x2021, 0x08BB, 0x2921, 0x601A, 0x701A, 0x801A,
                0x901A, 0xA01A, 0xB01A, 0xC01A, 0xD01A, 0xD11A, 0xD21A)
        },
        {
            // Because the Enter key is universally used to enter carriage returns, we have to compromise here
            // and represent some key combinations as carriage returns - specifically Shift-Enter, Capital-Enter and
            // Capital-Shift-Enter.  These are generally reported as carriage returns by keyboard layouts, and if we
            // don't enforce this convention, the calibration data cannot be parsed by the Calibrator.
            "Enter",
            (0x000D, 0x000D, 0x020D, 0x040D, 0x130D, 0x050D, 0x060D, 0x070D, 0x380D, 0x090D, 0x000D, 0x000D, 0x801B,
                0x901B, 0xA01B, 0xB01B, 0xC01B, 0xD01B, 0xD11B, 0xD21B)
        },
        {
            "KeyA",
            (0x0061, 0x0041, 0x0001, 0x0461, 0x2401, 0x0561, 0x00C1, 0x00E1, 0x18C1, 0x09E1, 0x601C, 0x701C, 0x801C,
                0x901C, 0xA01C, 0xB01C, 0xC01C, 0xD01C, 0xD11C, 0xD21C)
        },
        {
            "KeyS",
            (0x0073, 0x0053, 0x0013, 0x0473, 0x2413, 0x0573, 0x00DF, 0x00A7, 0x18DF, 0x09A7, 0x601D, 0x701D, 0x801D,
                0x901D, 0xA01D, 0xB01D, 0xC01D, 0xD01D, 0xD11D, 0xD21D)
        },
        {
            "KeyD",
            (0x0064, 0x0044, 0x0004, 0x0464, 0x2404, 0x0564, 0x00D0, 0x00F0, 0x18D0, 0x09F0, 0x601E, 0x701E, 0x801E,
                0x901E, 0xA01E, 0xB01E, 0xC01E, 0xD01E, 0xD11E, 0xD21E)
        },
        {
            "KeyF",
            (0x0066, 0x0046, 0x0006, 0x0466, 0x2406, 0x0566, 0x1666, 0x017F, 0x1866, 0x097F, 0x601F, 0x701F, 0x801F,
                0x901F, 0xA01F, 0xB01F, 0xC01F, 0xD01F, 0xD11F, 0xD21F)
        },
        {
            "KeyG",
            (0x0067, 0x0047, 0x0007, 0x0467, 0x2407, 0x0567, 0x01E6, 0x01E7, 0x18E6, 0x09E7, 0x6020, 0x7020, 0x8020,
                0x9020, 0xA020, 0xB020, 0xC020, 0xD020, 0xD120, 0xD220)
        },
        {
            "KeyH",
            (0x0068, 0x0048, 0x0208, 0x0468, 0x2408, 0x0568, 0x1668, 0x02CD, 0x1868, 0x29CD, 0x6021, 0x7021, 0x8021,
                0x9021, 0xA021, 0xB021, 0xC021, 0xD021, 0xD121, 0xD221)
        },
        {
            "KeyJ",
            (0x006A, 0x004A, 0x000A, 0x046A, 0x240A, 0x056A, 0x066A, 0x2122, 0x086A, 0x2922, 0x6022, 0x7022, 0x8022,
                0x9022, 0xA022, 0xB022, 0xC022, 0xD022, 0xD122, 0xD222)
        },
        {
            "KeyK",
            (0x006B, 0x004B, 0x000B, 0x046B, 0x240B, 0x056B, 0x01E8, 0x01E9, 0x18E8, 0x19E9, 0x6023, 0x7023, 0x8023,
                0x9023, 0xA023, 0xB023, 0xC023, 0xD023, 0xD123, 0xD223)
        },
        {
            "KeyL",
            (0x006C, 0x004C, 0x000C, 0x046C, 0x240C, 0x056C, 0x00D8, 0x00F8, 0x18D8, 0x09F8, 0x6024, 0x7024, 0x8024,
                0x9024, 0xA024, 0xB024, 0xC024, 0xD024, 0xD124, 0xD224)
        },
        {
            "Semicolon",
            (0x003B, 0x003A, 0x013B, 0x143B, 0x023B, 0x053B, 0x00B6, 0xFF9A, 0x08B6, 0xF99A, 0x6025, 0x7025, 0x8025,
                0x9025, 0xA025, 0xB025, 0xC025, 0xD025, 0xD125, 0xD225)
        },
        {
            "Quote",
            (0x0027, 0x0022, 0x0127, 0x0427, 0x0227, 0x0527, 0x00B4, 0x00A8, 0x08B4, 0x09A8, 0x6026, 0x7026, 0x8026,
                0x9026, 0xA026, 0xB026, 0xC026, 0xD026, 0xD126, 0xD226)
        },
        {
            "Backquote",
            (0x0060, 0x007E, 0x0160, 0x0460, 0x0260, 0x0560, 0x02D8, 0xFF9B, 0x28D8, 0xF99B, 0x6027, 0x7027, 0x8027,
                0x9027, 0xA027, 0xB027, 0xC027, 0xD027, 0xD127, 0xD227)
        },
        {
            "Backslash",
            (0x005C, 0x007C, 0x001C, 0x045C, 0x241C, 0x055C, 0x00AC, 0x00A6, 0x08AC, 0x09A6, 0x6028, 0x7028, 0x8028,
                0x9028, 0xA028, 0xB028, 0xC028, 0xD028, 0xD128, 0xD228)
        },
        {
            "KeyZ",
            (0x007A, 0x005A, 0x001A, 0x047A, 0x241A, 0x057A, 0x00C6, 0x00E6, 0x18C6, 0x09E6, 0x6029, 0x7029, 0x8029,
                0x9029, 0xA029, 0xB029, 0xC029, 0xD029, 0xD129, 0xD229)
        },
        {
            "KeyX",
            (0x0078, 0x0058, 0x0018, 0x0478, 0x2418, 0x0578, 0x0678, 0x017A, 0x2878, 0x097A, 0x602A, 0x702A, 0x802A,
                0x902A, 0xA02A, 0xB02A, 0xC02A, 0xD02A, 0xD12A, 0xD22A)
        },
        {
            "KeyC",
            (0x0063, 0x0043, 0x0003, 0x0463, 0x2403, 0x0563, 0x00A9, 0x00A2, 0x08A9, 0x09A2, 0x602B, 0x702B, 0x802B,
                0x902B, 0xA02B, 0xB02B, 0xC02B, 0xD02B, 0xD12B, 0xD22B)
        },
        {
            "KeyV",
            (0x0076, 0x0056, 0x0016, 0x0476, 0x2416, 0x0576, 0x00B8, 0x02DB, 0x08B8, 0x29DB, 0x602C, 0x702C, 0x802C,
                0x902C, 0xA02C, 0xB02C, 0xC02C, 0xD02C, 0xD12C, 0xD22C)
        },
        {
            "KeyB",
            (0x0062, 0x0042, 0x0002, 0x0462, 0x2402, 0x0562, 0x0602, 0x0292, 0x1802, 0x1992, 0x602D, 0x702D, 0x802D,
                0x902D, 0xA02D, 0xB02D, 0xC02D, 0xD02D, 0xD12D, 0xD22D)
        },
        {
            "KeyN",
            (0x006E, 0x004E, 0x000E, 0x046E, 0x240E, 0x056E, 0x00D1, 0x00F1, 0x18D1, 0x19F1, 0x602E, 0x702E, 0x802E,
                0x902E, 0xA02E, 0xB02E, 0xC02E, 0xD02E, 0xD12E, 0xD22E)
        },
        {
            "KeyM",
            (0x006D, 0x004D, 0x021D, 0x046D, 0x240D, 0x056D, 0x00B5, 0xFF93, 0x18B5, 0xF993, 0x602F, 0x702F, 0x802F,
                0x902F, 0xA02F, 0xB02F, 0xC02F, 0xD02F, 0xD12F, 0xD22F)
        },
        {
            "Comma",
            (0x002C, 0x003C, 0x022C, 0x042C, 0x232C, 0x052C, 0x00C7, 0x00E7, 0x18C7, 0x19E7, 0x6030, 0x7030, 0x8030,
                0x9030, 0xA030, 0xB030, 0xC030, 0xD030, 0xD130, 0xD230)
        },
        {
            "Period",
            (0x002E, 0x003E, 0x022E, 0x042E, 0x043E, 0x052E, 0xFF99, 0x2022, 0xF999, 0x3922, 0x6031, 0x7031, 0x8031,
                0x9031, 0xA031, 0xB031, 0xC031, 0xD031, 0xD131, 0xD231)
        },
        {
            "Slash",
            (0x002F, 0x003F, 0x022F, 0x042F, 0x043F, 0x052F, 0x00BF, 0x2260, 0x18BF, 0x2960, 0x6032, 0x7032, 0x8032,
                0x9032, 0xA032, 0xB032, 0xC032, 0xD032, 0xD132, 0xD232)
        },
        {
            // Because space characters are used as delimiters in calibration barcodes, we have to compromise here
            // and represent some key combinations as spaces - specifically Shift-Space, Capital-Space and
            // Capital-Shift-Space.  These are generally reported as spaces by keyboard layouts, and if we don't
            // enforce this convention, the calibration data cannot be parsed by the Calibrator.
            "Space",
            (0x0020, 0x0020, 0x0220, 0x0420, 0x0020, 0x0520, 0x0620, 0x0723, 0x1820, 0x0923, 0x0020, 0x0020, 0x8033,
                0x9033, 0xA033, 0xB033, 0xC033, 0xD033, 0xD133, 0xD233)
        },
        {
            "IntlBackslash",
            (0x015C, 0x017C, 0x011C, 0x145C, 0x335C, 0x155C, 0x01AC, 0x01A6, 0x38AC, 0x19A6, 0x6034, 0x7034, 0x8034,
                0x9034, 0xA034, 0xB034, 0xC034, 0xD034, 0xD134, 0xD234)
        },
        {
            "IntlHash",
            (0x22D5, 0x017E, 0x02A3, 0x01A3, 0x03B4, 0x02B4, 0x03A3, 0x04B4, 0x08A3, 0x09B6, 0x6035, 0x7035, 0x8035,
                0x9035, 0xA035, 0xB035, 0xC035, 0xD035, 0xD135, 0xD235)
        },
        {
            "IntlRo",
            (0x2215, 0x308D, 0x02DC, 0x01DC, 0x00EC, 0x02EC, 0x03DC, 0x04EC, 0x18EC, 0x09EC, 0x6036, 0x7036, 0x8036,
                0x9036, 0xA036, 0xB036, 0xC036, 0xD036, 0xD136, 0xD236)
        },
        {
            "IntlYen",
            (0x00A5, 0x012F, 0x0125, 0x0126, 0x0135, 0x0236, 0x1326, 0x0436, 0x1826, 0x0936, 0x6037, 0x7037, 0x8037,
                0x9037, 0xA037, 0xB037, 0xC037, 0xD037, 0xD137, 0xD237)
        },
        {
            "AltLeft",
            (0x3001, 0x2101, 0x2201, 0x3401, 0x2301, 0x2501, 0x2601, 0x2701, 0x2801, 0x2901, 0x6038, 0x7038, 0x8038,
                0x9038, 0xA038, 0xB038, 0xC038, 0xD038, 0xD138, 0xD238)
        },
        {
            "AltRight",
            (0x3002, 0x2102, 0x2202, 0x3402, 0x2302, 0x2502, 0x2602, 0x2702, 0x2802, 0x2902, 0x6039, 0x7039, 0x8039,
                0x9039, 0xA039, 0xB039, 0xC039, 0xD039, 0xD139, 0xD239)
        },
        {
            "CapsLock",
            (0x3003, 0x2103, 0x2203, 0x3403, 0x2303, 0x2503, 0x2603, 0x2703, 0x2803, 0x2903, 0x603A, 0x703A, 0x803A,
                0x903A, 0xA03A, 0xB03A, 0xC03A, 0xD03A, 0xD13A, 0xD23A)
        },
        {
            "ContextMenu",
            (0x3004, 0x2104, 0x2204, 0x3404, 0x2304, 0x2504, 0x2604, 0x2704, 0x2804, 0x2904, 0x603B, 0x703B, 0x803B,
                0x903B, 0xA03B, 0xB03B, 0xC03B, 0xD03B, 0xD13B, 0xD23B)
        },
        {
            "ControlLeft",
            (0x3005, 0x2105, 0x2205, 0x3405, 0x2305, 0x2505, 0x2605, 0x2705, 0x2805, 0x2905, 0x603C, 0x703C, 0x803C,
                0x903C, 0xA03C, 0xB03C, 0xC03C, 0xD03C, 0xD13C, 0xD23C)
        },
        {
            "ControlRight",
            (0x3006, 0x2106, 0x2206, 0x3406, 0x2306, 0x2506, 0x2606, 0x2706, 0x2806, 0x2906, 0x603D, 0x703D, 0x803D,
                0x903D, 0xA03D, 0xB03D, 0xC03D, 0xD03D, 0xD13D, 0xD23D)
        },
        {
            "MetaLeft",
            (0x3007, 0x2107, 0x2207, 0x3407, 0x2307, 0x2507, 0x2607, 0x2707, 0x2807, 0x2907, 0x603E, 0x703E, 0x803E,
                0x903E, 0xA03E, 0xB03E, 0xC03E, 0xD03E, 0xD13E, 0xD23E)
        },
        {
            "OSLeft",
            (0x3008, 0x3108, 0x3208, 0x3408, 0x2308, 0x2508, 0x2608, 0x2708, 0x2808, 0x2908, 0x603F, 0x703F, 0x803F,
                0x903F, 0xA03F, 0xB03F, 0xC03F, 0xD03F, 0xD13F, 0xD23F)
        },
        {
            "MetaRight",
            (0x3009, 0x3109, 0x3209, 0x3409, 0x2309, 0x2509, 0x2609, 0x2709, 0x2809, 0x2909, 0x6040, 0x7040, 0x8040,
                0x9040, 0xA040, 0xB040, 0xC040, 0xD040, 0xD140, 0xD240)
        },
        {
            "OSRight",
            (0x2010, 0x2110, 0x2210, 0x3410, 0x2310, 0x2510, 0x2610, 0x2710, 0x280A, 0x290A, 0x6041, 0x7041, 0x8041,
                0x9041, 0xA041, 0xB041, 0xC041, 0xD041, 0xD141, 0xD241)
        },
        {
            "ShiftLeft",
            (0x3011, 0x2111, 0x2211, 0x3411, 0x2311, 0x2511, 0x2611, 0x2711, 0x280B, 0x290B, 0x6042, 0x7042, 0x8042,
                0x9042, 0xA042, 0xB042, 0xC042, 0xD042, 0xD142, 0xD242)
        },
        {
            "ShiftRight",
            (0x2012, 0x2112, 0x3212, 0x3412, 0x2312, 0x2512, 0x2612, 0x2712, 0x280C, 0x290C, 0x6043, 0x7043, 0x8043,
                0x9043, 0xA043, 0xB043, 0xC043, 0xD043, 0xD143, 0xD243)
        },
        {
            "Convert",
            (0x2013, 0x2113, 0x2213, 0x3413, 0x2313, 0x2513, 0x2613, 0x2713, 0x280D, 0x290D, 0x6044, 0x7044, 0x8044,
                0x9044, 0xA044, 0xB044, 0xC044, 0xD044, 0xD144, 0xD244)
        },
        {
            "KanaMode",
            (0x3014, 0x2114, 0x2214, 0x3414, 0x2314, 0x2514, 0x2614, 0x2714, 0x280E, 0x290E, 0x6045, 0x7045, 0x8045,
                0x9045, 0xA045, 0xB045, 0xC045, 0xD045, 0xD145, 0xD245)
        },
        {
            "Lang1",
            (0x2015, 0x3115, 0x3215, 0x3415, 0x3315, 0x2515, 0x2615, 0x2715, 0x280F, 0x290F, 0x6046, 0x7046, 0x8046,
                0x9046, 0xA046, 0xB046, 0xC046, 0xD046, 0xD146, 0xD246)
        },
        {
            "Lang2",
            (0x2016, 0x2116, 0x2216, 0x3416, 0x2316, 0x2516, 0x2616, 0x2716, 0x2810, 0x2910, 0x6047, 0x7047, 0x8047,
                0x9047, 0xA047, 0xB047, 0xC047, 0xD047, 0xD147, 0xD247)
        },
        {
            "RomanCharacters",
            (0x2017, 0x2117, 0x3217, 0x3417, 0x2317, 0x2517, 0x2617, 0x2717, 0x2811, 0x3911, 0x6048, 0x7048, 0x8048,
                0x9048, 0xA048, 0xB048, 0xC048, 0xD048, 0xD148, 0xD248)
        },
        {
            "Lang3",
            (0x3018, 0x2118, 0x2218, 0x3418, 0x2318, 0x2518, 0x2618, 0x2718, 0x2812, 0x2912, 0x6049, 0x7049, 0x8049,
                0x9049, 0xA049, 0xB049, 0xC049, 0xD049, 0xD149, 0xD249)
        },
        {
            "Lang4",
            (0x3019, 0x2119, 0x2219, 0x3419, 0x2319, 0x2519, 0x2619, 0x2719, 0x2813, 0x2913, 0x604A, 0x704A, 0x804A,
                0x904A, 0xA04A, 0xB04A, 0xC04A, 0xD04A, 0xD14A, 0xD24A)
        },
        {
            "Lang5",
            (0x3020, 0x3120, 0x2220, 0x3320, 0x2320, 0x2520, 0x2620, 0x2720, 0x2814, 0x3914, 0x604B, 0x704B, 0x804B,
                0x904B, 0xA04B, 0xB04B, 0xC04B, 0xD04B, 0xD14B, 0xD24B)
        },
        {
            "NonConvert",
            (0x3021, 0x3121, 0x2221, 0x3421, 0x2321, 0x2521, 0x2621, 0x2721, 0x2815, 0x2915, 0x604C, 0x704C, 0x804C,
                0x904C, 0xA04C, 0xB04C, 0xC04C, 0xD04C, 0xD14C, 0xD24C)
        },
        {
            "Delete",
            (0x007F, 0x3122, 0x2222, 0x2322, 0x2421, 0x2522, 0x2622, 0x2722, 0x2816, 0x2916, 0x604D, 0x704D, 0x804D,
                0x904D, 0xA04D, 0xB04D, 0xC04D, 0xD04D, 0xD14D, 0xD24D)
        },
        {
            "End",
            (0x2023, 0x2123, 0x2223, 0x2323, 0x2423, 0x2523, 0x2623, 0x2723, 0x2817, 0x2917, 0x604E, 0x704E, 0x804E,
                0x904E, 0xA04E, 0xB04E, 0xC04E, 0xD04E, 0xD14E, 0xD24E)
        },
        {
            "Help",
            (0x2024, 0x2124, 0x2224, 0x2324, 0x2424, 0x2524, 0x2624, 0x2724, 0x3818, 0x2918, 0x604F, 0x704F, 0x804F,
                0x904F, 0xA04F, 0xB04F, 0xC04F, 0xD04F, 0xD14F, 0xD24F)
        },
        {
            "Home",
            (0x2025, 0x2125, 0x2225, 0x2325, 0x2425, 0x2525, 0x2625, 0x2725, 0x3819, 0x2919, 0x6050, 0x7050, 0x8050,
                0x9050, 0xA050, 0xB050, 0xC050, 0xD050, 0xD150, 0xD250)
        },
        {
            "Insert",
            (0x2026, 0x2126, 0x2226, 0x2326, 0x2426, 0x2526, 0x2626, 0x2726, 0x281A, 0x291A, 0x6051, 0x7051, 0x8051,
                0x9051, 0xA051, 0xB051, 0xC051, 0xD051, 0xD151, 0xD251)
        },
        {
            "PageDown",
            (0x2027, 0x2127, 0x2227, 0x2327, 0x3427, 0x2527, 0x2627, 0x2727, 0x281B, 0x291B, 0x6052, 0x7052, 0x8052,
                0x9052, 0xA052, 0xB052, 0xC052, 0xD052, 0xD152, 0xD252)
        },
        {
            "PageUp",
            (0x3028, 0x2128, 0x2228, 0x2328, 0x3428, 0x2528, 0x2628, 0x2728, 0x281C, 0x291C, 0x6053, 0x7053, 0x8053,
                0x9053, 0xA053, 0xB053, 0xC053, 0xD053, 0xD153, 0xD253)
        },
        {
            "ArrowDown",
            (0x2193, 0x2129, 0x2229, 0x2329, 0x3429, 0x2529, 0x2629, 0x2729, 0x281D, 0x291D, 0x6054, 0x7054, 0x8054,
                0x9054, 0xA054, 0xB054, 0xC054, 0xD054, 0xD154, 0xD254)
        },
        {
            "ArrowLeft",
            (0x2190, 0x212A, 0x222A, 0x232A, 0x342A, 0x252A, 0x262A, 0x272A, 0x281E, 0x291E, 0x6055, 0x7055, 0x8055,
                0x9055, 0xA055, 0xB055, 0xC055, 0xD055, 0xD155, 0xD255)
        },
        {
            "ArrowRight",
            (0x2192, 0x212B, 0x222B, 0x332B, 0x342B, 0x252B, 0x262B, 0x272B, 0x281F, 0x291F, 0x6056, 0x7056, 0x8056,
                0x9056, 0xA056, 0xB056, 0xC056, 0xD056, 0xD156, 0xD256)
        },
        {
            "ArrowUp",
            (0x2191, 0x212C, 0x222C, 0x332C, 0x342C, 0x252C, 0x262C, 0x272C, 0x2820, 0x2920, 0x6057, 0x7057, 0x8057,
                0x9057, 0xA057, 0xB057, 0xC057, 0xD057, 0xD157, 0xD257)
        },
        {
            "NumLock",
            (0x302D, 0x212D, 0x222D, 0x332D, 0x342D, 0x252D, 0x262D, 0x272D, 0x2821, 0x3921, 0x6058, 0x7058, 0x8058,
                0x9058, 0xA058, 0xB058, 0xC058, 0xD058, 0xD158, 0xD258)
        },
        {
            "Numpad0",
            (0x0660, 0x212E, 0x222E, 0x332E, 0x342E, 0x252E, 0x262E, 0x272E, 0x2822, 0x4922, 0x6059, 0x7059, 0x8059,
                0x9059, 0xA059, 0xB059, 0xC059, 0xD059, 0xD159, 0xD259)
        },
        {
            "Numpad1",
            (0x0661, 0x212F, 0x222F, 0x332F, 0x342F, 0x252F, 0x262F, 0x272F, 0x2823, 0x2923, 0x605A, 0x705A, 0x805A,
                0x905A, 0xA05A, 0xB05A, 0xC05A, 0xD05A, 0xD15A, 0xD25A)
        },
        {
            "Numpad2",
            (0x0662, 0x2130, 0x2230, 0x2330, 0x3430, 0x2530, 0x2630, 0x2730, 0x2824, 0x3924, 0x605B, 0x705B, 0x805B,
                0x905B, 0xA05B, 0xB05B, 0xC05B, 0xD05B, 0xD15B, 0xD25B)
        },
        {
            "Numpad3",
            (0x0663, 0x2131, 0x2231, 0x2331, 0x3431, 0x2531, 0x2631, 0x2731, 0x2825, 0x2925, 0x605C, 0x705C, 0x805C,
                0x905C, 0xA05C, 0xB05C, 0xC05C, 0xD05C, 0xD15C, 0xD25C)
        },
        {
            "Numpad4",
            (0x0664, 0x2132, 0x2232, 0x2332, 0x3432, 0x2532, 0x2632, 0x2732, 0x2826, 0x2926, 0x605D, 0x705D, 0x805D,
                0x905D, 0xA05D, 0xB05D, 0xC05D, 0xD05D, 0xD15D, 0xD25D)
        },
        {
            "Numpad5",
            (0x0665, 0x2133, 0x2233, 0x2333, 0x3433, 0x2533, 0x2633, 0x2733, 0x2827, 0x2927, 0x605E, 0x705E, 0x805E,
                0x905E, 0xA05E, 0xB05E, 0xC05E, 0xD05E, 0xD15E, 0xD25E)
        },
        {
            "Numpad6",
            (0x0666, 0x2134, 0x2234, 0x2334, 0x3434, 0x2534, 0x2634, 0x2734, 0x2828, 0x2928, 0x605F, 0x705F, 0x805F,
                0x905F, 0xA05F, 0xB05F, 0xC05F, 0xD05F, 0xD15F, 0xD25F)
        },
        {
            "Numpad7",
            (0x0667, 0x2135, 0x2235, 0x2335, 0x3435, 0x2535, 0x2635, 0x2735, 0x2829, 0x2929, 0x6060, 0x7060, 0x8060,
                0x9060, 0xA060, 0xB060, 0xC060, 0xD060, 0xD160, 0xD260)
        },
        {
            "Numpad8",
            (0x0668, 0x2136, 0x2236, 0x2336, 0x3436, 0x2536, 0x2636, 0x2736, 0x282A, 0x292A, 0x6061, 0x7061, 0x8061,
                0x9061, 0xA061, 0xB061, 0xC061, 0xD061, 0xD161, 0xD261)
        },
        {
            "Numpad9",
            (0x0669, 0x2137, 0x2237, 0x2337, 0x3437, 0x2537, 0x2637, 0x2737, 0x282B, 0x292B, 0x6062, 0x7062, 0x8062,
                0x9062, 0xA062, 0xB062, 0xC062, 0xD062, 0xD162, 0xD262)
        },
        {
            "NumpadAdd",
            (0x2A01, 0x2138, 0x2238, 0x2338, 0x3438, 0x2538, 0x2638, 0x2738, 0x282C, 0x292C, 0x6063, 0x7063, 0x8063,
                0x9063, 0xA063, 0xB063, 0xC063, 0xD063, 0xD163, 0xD263)
        },
        {
            "NumpadBackspace",
            (0x2039, 0x2139, 0x2239, 0x2339, 0x3439, 0x2539, 0x2639, 0x2739, 0x282D, 0x292D, 0x6064, 0x7064, 0x8064,
                0x9064, 0xA064, 0xB064, 0xC064, 0xD064, 0xD164, 0xD264)
        },
        {
            "NumpadClear",
            (0x203A, 0x213A, 0x223A, 0x233A, 0x343A, 0x253A, 0x263A, 0x273A, 0x282E, 0x292E, 0x6065, 0x7065, 0x8065,
                0x9065, 0xA065, 0xB065, 0xC065, 0xD065, 0xD165, 0xD265)
        },
        {
            "NumpadClearEntry",
            (0x203B, 0x213B, 0x323B, 0x233B, 0x343B, 0x253B, 0x263B, 0x273B, 0x282F, 0x292F, 0x6066, 0x7066, 0x8066,
                0x9066, 0xA066, 0xB066, 0xC066, 0xD066, 0xD166, 0xD266)
        },
        {
            "NumpadComma",
            (0xFE50, 0x213C, 0x223C, 0x233C, 0x343C, 0x253C, 0x263C, 0x273C, 0x2830, 0x2930, 0x6067, 0x7067, 0x8067,
                0x9067, 0xA067, 0xB067, 0xC067, 0xD067, 0xD167, 0xD267)
        },
        {
            "NumpadDecimal",
            (0x2396, 0x213D, 0x223D, 0x333D, 0x343D, 0x253D, 0x263D, 0x273D, 0x2831, 0x3931, 0x6068, 0x7068, 0x8068,
                0x9068, 0xA068, 0xB068, 0xC068, 0xD068, 0xD168, 0xD268)
        },
        {
            "NumpadDivide",
            (0x223B, 0x213E, 0x223E, 0x233E, 0x343E, 0x253E, 0x263E, 0x273E, 0x2832, 0x2932, 0x6069, 0x7069, 0x8069,
                0x9069, 0xA069, 0xB069, 0xC069, 0xD069, 0xD169, 0xD269)
        },
        {
            "NumpadEnter",
            (0x066D, 0x213F, 0x223F, 0x233F, 0x343F, 0x253F, 0x263F, 0x273F, 0x2833, 0x2933, 0x606A, 0x706A, 0x806A,
                0x906A, 0xA06A, 0xB06A, 0xC06A, 0xD06A, 0xD16A, 0xD26A)
        },
        {
            "NumpadEqual",
            (0x2248, 0x2140, 0x2240, 0x2340, 0x3440, 0x2540, 0x2640, 0x2740, 0x2834, 0x3934, 0x606B, 0x706B, 0x806B,
                0x906B, 0xA06B, 0xB06B, 0xC06B, 0xD06B, 0xD16B, 0xD26B)
        },
        {
            "NumpadHash",
            (0x0683, 0x2141, 0x2241, 0x2341, 0x3441, 0x2541, 0x2641, 0x2741, 0x2835, 0x2935, 0x606C, 0x706C, 0x806C,
                0x906C, 0xA06C, 0xB06C, 0xC06C, 0xD06C, 0xD16C, 0xD26C)
        },
        {
            "NumpadMemoryAdd",
            (0x2042, 0x2142, 0x2242, 0x2342, 0x3442, 0x2542, 0x2642, 0x2742, 0x2836, 0x2936, 0x606D, 0x706D, 0x806D,
                0x906D, 0xA06D, 0xB06D, 0xC06D, 0xD06D, 0xD16D, 0xD26D)
        },
        {
            "NumpadMemoryClear",
            (0x2043, 0x2143, 0x2243, 0x2343, 0x3443, 0x2543, 0x2643, 0x2743, 0x2837, 0x2937, 0x606E, 0x706E, 0x806E,
                0x906E, 0xA06E, 0xB06E, 0xC06E, 0xD06E, 0xD16E, 0xD26E)
        },
        {
            "NumpadMemoryRecall",
            (0x2044, 0x2144, 0x2244, 0x2344, 0x3444, 0x2544, 0x2644, 0x2744, 0x2838, 0x2938, 0x606F, 0x706F, 0x806F,
                0x906F, 0xA06F, 0xB06F, 0xC06F, 0xD06F, 0xD16F, 0xD26F)
        },
        {
            "NumpadMemoryStore",
            (0x2045, 0x2145, 0x2245, 0x2345, 0x3445, 0x2545, 0x2645, 0x2745, 0x2839, 0x3939, 0x6070, 0x7070, 0x8070,
                0x9070, 0xA070, 0xB070, 0xC070, 0xD070, 0xD170, 0xD270)
        },
        {
            "NumpadMemorySubtract",
            (0x2046, 0x2146, 0x2246, 0x2346, 0x3446, 0x2546, 0x2646, 0x2746, 0x283A, 0x393A, 0x6071, 0x7071, 0x8071,
                0x9071, 0xA071, 0xB071, 0xC071, 0xD071, 0xD171, 0xD271)
        },
        {
            "NumpadMultiply",
            (0x2A2F, 0x2147, 0x2247, 0x2347, 0x3447, 0x2547, 0x2647, 0x2747, 0x283B, 0x293B, 0x6072, 0x7072, 0x8072,
                0x9072, 0xA072, 0xB072, 0xC072, 0xD072, 0xD172, 0xD272)
        },
        {
            "NumpadParenLeft",
            (0x2048, 0x2148, 0x3248, 0x2348, 0x3448, 0x2548, 0x2648, 0x2748, 0x283C, 0x293C, 0x6073, 0x7073, 0x8073,
                0x9073, 0xA073, 0xB073, 0xC073, 0xD073, 0xD173, 0xD273)
        },
        {
            "NumpadParenRight",
            (0x2049, 0x2149, 0x2249, 0x2349, 0x3449, 0x2549, 0x2649, 0x2749, 0x283D, 0x293D, 0x6074, 0x7074, 0x8074,
                0x9074, 0xA074, 0xB074, 0xC074, 0xD074, 0xD174, 0xD274)
        },
        {
            "NumpadStar",
            (0x2217, 0x214A, 0x224A, 0x234A, 0x344A, 0x254A, 0x264A, 0x274A, 0x283E, 0x293E, 0x6075, 0x7075, 0x8075,
                0x9075, 0xA075, 0xB075, 0xC075, 0xD075, 0xD175, 0xD275)
        },
        {
            "NumpadSubtract",
            (0x2212, 0x214B, 0x224B, 0x234B, 0x344B, 0x254B, 0x264B, 0x274B, 0x283F, 0x293F, 0x6076, 0x7076, 0x8076,
                0x9076, 0xA076, 0xB076, 0xC076, 0xD076, 0xD176, 0xD276)
        },
        {
            "F1",
            (0x204C, 0x214C, 0x224C, 0x234C, 0x344C, 0x254C, 0x264C, 0x274C, 0x2840, 0x2940, 0x6077, 0x7077, 0x8077,
                0x9077, 0xA077, 0xB077, 0xC077, 0xD077, 0xD177, 0xD277)
        },
        {
            "F2",
            (0x204D, 0x214D, 0x224D, 0x234D, 0x344D, 0x254D, 0x264D, 0x274D, 0x2841, 0x3941, 0x6078, 0x7078, 0x8078,
                0x9078, 0xA078, 0xB078, 0xC078, 0xD078, 0xD178, 0xD278)
        },
        {
            "F3",
            (0x204E, 0x214E, 0x224E, 0x234E, 0x344E, 0x254E, 0x264E, 0x274E, 0x2842, 0x2942, 0x6079, 0x7079, 0x8079,
                0x9079, 0xA079, 0xB079, 0xC079, 0xD079, 0xD179, 0xD279)
        },
        {
            "F4",
            (0x204F, 0x214F, 0x224F, 0x234F, 0x344F, 0x254F, 0x264F, 0x274F, 0x2843, 0x2943, 0x607A, 0x707A, 0x807A,
                0x907A, 0xA07A, 0xB07A, 0xC07A, 0xD07A, 0xD17A, 0xD27A)
        },
        {
            "F5",
            (0x2050, 0x2150, 0x2250, 0x2350, 0x3450, 0x2550, 0x2650, 0x2750, 0x2844, 0x3944, 0x607B, 0x707B, 0x807B,
                0x907B, 0xA07B, 0xB07B, 0xC07B, 0xD07B, 0xD17B, 0xD27B)
        },
        {
            "F6",
            (0x2051, 0x2151, 0x2251, 0x2351, 0x3451, 0x2551, 0x2651, 0x2751, 0x2845, 0x2945, 0x607C, 0x707C, 0x807C,
                0x907C, 0xA07C, 0xB07C, 0xC07C, 0xD07C, 0xD17C, 0xD27C)
        },
        {
            "F7",
            (0x2052, 0x2152, 0x2252, 0x2352, 0x3452, 0x2552, 0x2652, 0x2752, 0x2846, 0x2946, 0x607D, 0x707D, 0x807D,
                0x907D, 0xA07D, 0xB07D, 0xC07D, 0xD07D, 0xD17D, 0xD27D)
        },
        {
            "F8",
            (0x2053, 0x2153, 0x2253, 0x2353, 0x3453, 0x2553, 0x2653, 0x2753, 0x2847, 0x2947, 0x607E, 0x707E, 0x807E,
                0x907E, 0xA07E, 0xB07E, 0xC07E, 0xD07E, 0xD17E, 0xD27E)
        },
        {
            "F9",
            (0x2054, 0x2154, 0x2254, 0x2354, 0x3454, 0x2554, 0x2654, 0x2754, 0x2848, 0x2948, 0x607F, 0x707F, 0x807F,
                0x907F, 0xA07F, 0xB07F, 0xC07F, 0xD07F, 0xD17F, 0xD27F)
        },
        {
            "F10",
            (0x2055, 0x2155, 0x2255, 0x2355, 0x3455, 0x2555, 0x2655, 0x2755, 0x2849, 0x2949, 0x6080, 0x7080, 0x8080,
                0x9080, 0xA080, 0xB080, 0xC080, 0xD080, 0xD180, 0xD280)
        },
        {
            "F11",
            (0x2056, 0x2156, 0x2256, 0x2356, 0x3456, 0x2556, 0x2656, 0x2756, 0x284A, 0x294A, 0x6081, 0x7081, 0x8081,
                0x9081, 0xA081, 0xB081, 0xC081, 0xD081, 0xD181, 0xD281)
        },
        {
            "F12",
            (0x2057, 0x2157, 0x2257, 0x2357, 0x3457, 0x2557, 0x2657, 0x2757, 0x284B, 0x294B, 0x6082, 0x7082, 0x8082,
                0x9082, 0xA082, 0xB082, 0xC082, 0xD082, 0xD182, 0xD282)
        },
        {
            "Fn",
            (0x2058, 0x2158, 0x2258, 0x2358, 0x3458, 0x2558, 0x2658, 0x2758, 0x284C, 0x294C, 0x6083, 0x7083, 0x8083,
                0x9083, 0xA083, 0xB083, 0xC083, 0xD083, 0xD183, 0xD283)
        },
        {
            "FnLock",
            (0x2059, 0x2159, 0x2259, 0x2359, 0x3459, 0x2559, 0x2659, 0x2759, 0x284D, 0x294D, 0x6084, 0x7084, 0x8084,
                0x9084, 0xA084, 0xB084, 0xC084, 0xD084, 0xD184, 0xD284)
        },
        {
            "PrintScreen",
            (0x205A, 0x215A, 0x225A, 0x235A, 0x345A, 0x255A, 0x265A, 0x275A, 0x284E, 0x294E, 0x6085, 0x7085, 0x8085,
                0x9085, 0xA085, 0xB085, 0xC085, 0xD085, 0xD185, 0xD285)
        },
        {
            "ScrollLock",
            (0x205B, 0x215B, 0x225B, 0x235B, 0x345B, 0x255B, 0x265B, 0x275B, 0x284F, 0x294F, 0x6086, 0x7086, 0x8086,
                0x9086, 0xA086, 0xB086, 0xC086, 0xD086, 0xD186, 0xD286)
        },
        {
            "Pause",
            (0x205C, 0x215C, 0x225C, 0x235C, 0x345C, 0x255C, 0x265C, 0x275C, 0x2850, 0x2950, 0x6087, 0x7087, 0x8087,
                0x9087, 0xA087, 0xB087, 0xC087, 0xD087, 0xD187, 0xD287)
        },
        {
            "BrowserBack",
            (0x205D, 0x215D, 0x225D, 0x235D, 0x345D, 0x255D, 0x265D, 0x275D, 0x2851, 0x3951, 0x6088, 0x7088, 0x8088,
                0x9088, 0xA088, 0xB088, 0xC088, 0xD088, 0xD188, 0xD288)
        },
        {
            "BrowserFavorites",
            (0x305E, 0x215E, 0x225E, 0x235E, 0x345E, 0x255E, 0x265E, 0x275E, 0x2852, 0x2952, 0x6089, 0x7089, 0x8089,
                0x9089, 0xA089, 0xB089, 0xC089, 0xD089, 0xD189, 0xD289)
        },
        {
            "BrowserForward",
            (0x305F, 0x215F, 0x225F, 0x235F, 0x345F, 0x255F, 0x265F, 0x275F, 0x2853, 0x2953, 0x608A, 0x708A, 0x808A,
                0x908A, 0xA08A, 0xB08A, 0xC08A, 0xD08A, 0xD18A, 0xD28A)
        },
        {
            "BrowserHome",
            (0x3060, 0x2160, 0x3260, 0x2360, 0x2460, 0x2560, 0x2660, 0x2760, 0x2854, 0x2954, 0x608B, 0x708B, 0x808B,
                0x908B, 0xA08B, 0xB08B, 0xC08B, 0xD08B, 0xD18B, 0xD28B)
        },
        {
            "BrowserRefresh",
            (0x3061, 0x2161, 0x2261, 0x2361, 0x2461, 0x2561, 0x2661, 0x2761, 0x2855, 0x2955, 0x608C, 0x708C, 0x808C,
                0x908C, 0xA08C, 0xB08C, 0xC08C, 0xD08C, 0xD18C, 0xD28C)
        },
        {
            "BrowserSearch",
            (0x3062, 0x2162, 0x2262, 0x2362, 0x2462, 0x2562, 0x2662, 0x2762, 0x2856, 0x2956, 0x608D, 0x708D, 0x808D,
                0x908D, 0xA08D, 0xB08D, 0xC08D, 0xD08D, 0xD18D, 0xD28D)
        },
        {
            "BrowserStop",
            (0x3063, 0x2163, 0x2263, 0x2363, 0x2463, 0x2563, 0x2663, 0x2763, 0x2857, 0x2957, 0x608E, 0x708E, 0x808E,
                0x908E, 0xA08E, 0xB08E, 0xC08E, 0xD08E, 0xD18E, 0xD28E)
        },
        {
            "Eject",
            (0x3064, 0x2164, 0x2264, 0x2364, 0x2464, 0x2564, 0x2664, 0x2764, 0x2858, 0x2958, 0x608F, 0x708F, 0x808F,
                0x908F, 0xA08F, 0xB08F, 0xC08F, 0xD08F, 0xD18F, 0xD28F)
        },
        {
            "LaunchApp1",
            (0x3065, 0x2165, 0x2265, 0x2365, 0x2465, 0x2565, 0x2665, 0x2765, 0x2859, 0x2959, 0x6090, 0x7090, 0x8090,
                0x9090, 0xA090, 0xB090, 0xC090, 0xD090, 0xD190, 0xD290)
        },
        {
            "LaunchApp2",
            (0x3066, 0x2166, 0x2266, 0x2366, 0x2466, 0x2566, 0x2666, 0x2766, 0x285A, 0x295A, 0x6091, 0x7091, 0x8091,
                0x9091, 0xA091, 0xB091, 0xC091, 0xD091, 0xD191, 0xD291)
        },
        {
            "LaunchMail",
            (0x3067, 0x2167, 0x2267, 0x2367, 0x2467, 0x2567, 0x2667, 0x2767, 0x285B, 0x295B, 0x6092, 0x7092, 0x8092,
                0x9092, 0xA092, 0xB092, 0xC092, 0xD092, 0xD192, 0xD292)
        },
        {
            "MediaPlayPause",
            (0x3068, 0x2168, 0x2268, 0x2368, 0x2468, 0x2568, 0x2668, 0x2768, 0x285C, 0x295C, 0x6093, 0x7093, 0x8093,
                0x9093, 0xA093, 0xB093, 0xC093, 0xD093, 0xD193, 0xD293)
        },
        {
            "LaunchMediaPlayer",
            (0x3069, 0x2169, 0x2269, 0x2369, 0x2469, 0x2569, 0x2669, 0x2769, 0x285D, 0x295D, 0x6094, 0x7094, 0x8094,
                0x9094, 0xA094, 0xB094, 0xC094, 0xD094, 0xD194, 0xD294)
        },
        {
            "MediaSelect",
            (0x306A, 0x216A, 0x226A, 0x236A, 0x246A, 0x256A, 0x266A, 0x276A, 0x285E, 0x295E, 0x6095, 0x7095, 0x8095,
                0x9095, 0xA095, 0xB095, 0xC095, 0xD095, 0xD195, 0xD295)
        },
        {
            "MediaStop",
            (0x306B, 0x216B, 0x226B, 0x236B, 0x246B, 0x256B, 0x266B, 0x276B, 0x285F, 0x295F, 0x6096, 0x7096, 0x8096,
                0x9096, 0xA096, 0xB096, 0xC096, 0xD096, 0xD196, 0xD296)
        },
        {
            "MediaTrackNext",
            (0x306C, 0x216C, 0x226C, 0x236C, 0x246C, 0x256C, 0x266C, 0x276C, 0x2860, 0x3960, 0x6097, 0x7097, 0x8097,
                0x9097, 0xA097, 0xB097, 0xC097, 0xD097, 0xD197, 0xD297)
        },
        {
            "MediaTrackPrevious",
            (0x306D, 0x216D, 0x226D, 0x236D, 0x246D, 0x256D, 0x266D, 0x276D, 0x2861, 0x2961, 0x6098, 0x7098, 0x8098,
                0x9098, 0xA098, 0xB098, 0xC098, 0xD098, 0xD198, 0xD298)
        },
        {
            "Power",
            (0x306E, 0x216E, 0x226E, 0x236E, 0x246E, 0x256E, 0x266E, 0x276E, 0x2862, 0x2962, 0x6099, 0x7099, 0x8099,
                0x9099, 0xA099, 0xB099, 0xC099, 0xD099, 0xD199, 0xD299)
        },
        {
            "Sleep",
            (0x306F, 0x216F, 0x226F, 0x236F, 0x246F, 0x256F, 0x266F, 0x276F, 0x2863, 0x2963, 0x609A, 0x709A, 0x809A,
                0x909A, 0xA09A, 0xB09A, 0xC09A, 0xD09A, 0xD19A, 0xD29A)
        },
        {
            "AudioVolumeDown",
            (0x2070, 0x2170, 0x2270, 0x2370, 0x2470, 0x2570, 0x2670, 0x2770, 0x2864, 0x2964, 0x609B, 0x709B, 0x809B,
                0x909B, 0xA09B, 0xB09B, 0xC09B, 0xD09B, 0xD19B, 0xD29B)
        },
        {
            "VolumeDown",
            (0x2071, 0x2171, 0x2271, 0x2371, 0x2471, 0x2571, 0x2671, 0x2771, 0x2865, 0x2965, 0x609C, 0x709C, 0x809C,
                0x909C, 0xA09C, 0xB09C, 0xC09C, 0xD09C, 0xD19C, 0xD29C)
        },
        {
            "AudioVolumeMute",
            (0x3072, 0x2172, 0x2272, 0x2372, 0x2472, 0x2572, 0x2672, 0x2772, 0x2866, 0x2966, 0x609D, 0x709D, 0x809D,
                0x909D, 0xA09D, 0xB09D, 0xC09D, 0xD09D, 0xD19D, 0xD29D)
        },
        {
            "VolumeMute",
            (0x3073, 0x2173, 0x2273, 0x2373, 0x2473, 0x2573, 0x2673, 0x2773, 0x2867, 0x2967, 0x609E, 0x709E, 0x809E,
                0x909E, 0xA09E, 0xB09E, 0xC09E, 0xD09E, 0xD19E, 0xD29E)
        },
        {
            "AudioVolumeUp",
            (0x2074, 0x2174, 0x2274, 0x2374, 0x2474, 0x2574, 0x2674, 0x2774, 0x2868, 0x2968, 0x609F, 0x709F, 0x809F,
                0x909F, 0xA09F, 0xB09F, 0xC09F, 0xD09F, 0xD19F, 0xD29F)
        },
        {
            "VolumeUp",
            (0x2075, 0x2175, 0x2275, 0x2375, 0x2475, 0x2575, 0x2675, 0x2775, 0x2869, 0x2969, 0x60A0, 0x70A0, 0x80A0,
                0x90A0, 0xA0A0, 0xB0A0, 0xC0A0, 0xD0A0, 0xD1A0, 0xD2A0)
        },
        {
            "WakeUp",
            (0x2076, 0x2176, 0x2276, 0x2376, 0x2476, 0x2576, 0x2676, 0x2776, 0x286A, 0x296A, 0x60A1, 0x70A1, 0x80A1,
                0x90A1, 0xA0A1, 0xB0A1, 0xC0A1, 0xD0A1, 0xD1A1, 0xD2A1)
        },
        {
            "Hyper",
            (0x2077, 0x2177, 0x2277, 0x2377, 0x2477, 0x2577, 0x2677, 0x2777, 0x286B, 0x296B, 0x60A2, 0x70A2, 0x80A2,
                0x90A2, 0xA0A2, 0xB0A2, 0xC0A2, 0xD0A2, 0xD1A2, 0xD2A2)
        },
        {
            "Super",
            (0x2078, 0x2178, 0x2278, 0x2378, 0x2478, 0x2578, 0x2678, 0x2778, 0x286C, 0x296C, 0x60A3, 0x70A3, 0x80A3,
                0x90A3, 0xA0A3, 0xB0A3, 0xC0A3, 0xD0A3, 0xD1A3, 0xD2A3)
        },
        {
            "Turbo",
            (0x2079, 0x2179, 0x2279, 0x2379, 0x2479, 0x2579, 0x2679, 0x2779, 0x286D, 0x296D, 0x60A4, 0x70A4, 0x80A4,
                0x90A4, 0xA0A4, 0xB0A4, 0xC0A4, 0xD0A4, 0xD1A4, 0xD2A4)
        },
        {
            "Abort",
            (0x207A, 0x217A, 0x227A, 0x237A, 0x247A, 0x257A, 0x267A, 0x277A, 0x286E, 0x296E, 0x60A5, 0x70A5, 0x80A5,
                0x90A5, 0xA0A5, 0xB0A5, 0xC0A5, 0xD0A5, 0xD1A5, 0xD2A5)
        },
        {
            "Resume",
            (0x207B, 0x217B, 0x227B, 0x237B, 0x247B, 0x257B, 0x267B, 0x277B, 0x286F, 0x296F, 0x60A6, 0x70A6, 0x80A6,
                0x90A6, 0xA0A6, 0xB0A6, 0xC0A6, 0xD0A6, 0xD1A6, 0xD2A6)
        },
        {
            "Suspend",
            (0x207C, 0x217C, 0x227C, 0x237C, 0x247C, 0x257C, 0x267C, 0x277C, 0x2870, 0x2970, 0x60A7, 0x70A7, 0x80A7,
                0x90A7, 0xA0A7, 0xB0A7, 0xC0A7, 0xD0A7, 0xD1A7, 0xD2A7)
        },
        {
            "Again",
            (0x207D, 0x217D, 0x227D, 0x237D, 0x247D, 0x257D, 0x267D, 0x277D, 0x2871, 0x2971, 0x60A8, 0x70A8, 0x80A8,
                0x90A8, 0xA0A8, 0xB0A8, 0xC0A8, 0xD0A8, 0xD1A8, 0xD2A8)
        },
        {
            "Copy",
            (0x207E, 0x217E, 0x227E, 0x237E, 0x247E, 0x257E, 0x267E, 0x277E, 0x2872, 0x2972, 0x60A9, 0x70A9, 0x80A9,
                0x90A9, 0xA0A9, 0xB0A9, 0xC0A9, 0xD0A9, 0xD1A9, 0xD2A9)
        },
        {
            "Cut",
            (0x207F, 0x217F, 0x227F, 0x237F, 0x247F, 0x257F, 0x267F, 0x277F, 0x2873, 0x2973, 0x60AA, 0x70AA, 0x80AA,
                0x90AA, 0xA0AA, 0xB0AA, 0xC0AA, 0xD0AA, 0xD1AA, 0xD2AA)
        },
        {
            "Find",
            (0x2080, 0x2180, 0x2280, 0x2380, 0x2480, 0x2580, 0x2680, 0x2780, 0x2874, 0x2974, 0x60AB, 0x70AB, 0x80AB,
                0x90AB, 0xA0AB, 0xB0AB, 0xC0AB, 0xD0AB, 0xD1AB, 0xD2AB)
        },
        {
            "Open",
            (0x2081, 0x2181, 0x2281, 0x2381, 0x2481, 0x2581, 0x2681, 0x2781, 0x2875, 0x2975, 0x60AC, 0x70AC, 0x80AC,
                0x90AC, 0xA0AC, 0xB0AC, 0xC0AC, 0xD0AC, 0xD1AC, 0xD2AC)
        },
        {
            "Paste",
            (0x2082, 0x2182, 0x2282, 0x2382, 0x2482, 0x2582, 0x2682, 0x2782, 0x2876, 0x2976, 0x60AD, 0x70AD, 0x80AD,
                0x90AD, 0xA0AD, 0xB0AD, 0xC0AD, 0xD0AD, 0xD1AD, 0xD2AD)
        },
        {
            "Props",
            (0x2083, 0x2183, 0x2283, 0x2383, 0x2483, 0x2583, 0x2683, 0x2783, 0x2877, 0x2977, 0x60AE, 0x70AE, 0x80AE,
                0x90AE, 0xA0AE, 0xB0AE, 0xC0AE, 0xD0AE, 0xD1AE, 0xD2AE)
        },
        {
            "Select",
            (0x2084, 0x2184, 0x2284, 0x2384, 0x2484, 0x2584, 0x2684, 0x2784, 0x3878, 0x2978, 0x60AF, 0x70AF, 0x80AF,
                0x90AF, 0xA0AF, 0xB0AF, 0xC0AF, 0xD0AF, 0xD1AF, 0xD2AF)
        },
        {
            "Undo",
            (0x2085, 0x2185, 0x2285, 0x2385, 0x2485, 0x2585, 0x2685, 0x2785, 0x2879, 0x2979, 0x60B0, 0x70B0, 0x80B0,
                0x90B0, 0xA0B0, 0xB0B0, 0xC0B0, 0xD0B0, 0xD1B0, 0xD2B0)
        },
        {
            "Hiragana",
            (0x2086, 0x2186, 0x2286, 0x2386, 0x2486, 0x2586, 0x2686, 0x2786, 0x287A, 0x297A, 0x60B1, 0x70B1, 0x80B1,
                0x90B1, 0xA0B1, 0xB0B1, 0xC0B1, 0xD0B1, 0xD1B1, 0xD2B1)
        },
        {
            "Katakana",
            (0x2087, 0x2187, 0x2287, 0x2387, 0x2487, 0x2587, 0x2687, 0x2787, 0x287B, 0x297B, 0x60B2, 0x70B2, 0x80B2,
                0x90B2, 0xA0B2, 0xB0B2, 0xC0B2, 0xD0B2, 0xD1B2, 0xD2B2)
        },
        {
            "F13",
            (0x2088, 0x2188, 0x2288, 0x2388, 0x2488, 0x2588, 0x2688, 0x2788, 0x287C, 0x297C, 0x60B3, 0x70B3, 0x80B3,
                0x90B3, 0xA0B3, 0xB0B3, 0xC0B3, 0xD0B3, 0xD1B3, 0xD2B3)
        },
        {
            "F14",
            (0x2089, 0x2189, 0x2289, 0x2389, 0x2489, 0x2589, 0x2689, 0x2789, 0x287D, 0x297D, 0x60B4, 0x70B4, 0x80B4,
                0x90B4, 0xA0B4, 0xB0B4, 0xC0B4, 0xD0B4, 0xD1B4, 0xD2B4)
        },
        {
            "F15",
            (0x208A, 0x218A, 0x228A, 0x238A, 0x248A, 0x258A, 0x268A, 0x278A, 0x287E, 0x297E, 0x60B5, 0x70B5, 0x80B5,
                0x90B5, 0xA0B5, 0xB0B5, 0xC0B5, 0xD0B5, 0xD1B5, 0xD2B5)
        },
        {
            "F16",
            (0x208B, 0x218B, 0x228B, 0x238B, 0x248B, 0x258B, 0x268B, 0x278B, 0x287F, 0x297F, 0x60B6, 0x70B6, 0x80B6,
                0x90B6, 0xA0B6, 0xB0B6, 0xC0B6, 0xD0B6, 0xD1B6, 0xD2B6)
        },
        {
            "F17",
            (0x208C, 0x318C, 0x228C, 0x238C, 0x248C, 0x258C, 0x268C, 0x278C, 0x2880, 0x2980, 0x60B7, 0x70B7, 0x80B7,
                0x90B7, 0xA0B7, 0xB0B7, 0xC0B7, 0xD0B7, 0xD1B7, 0xD2B7)
        },
        {
            "F18",
            (0x208D, 0x318D, 0x228D, 0x238D, 0x248D, 0x258D, 0x268D, 0x278D, 0x2881, 0x2981, 0x60B8, 0x70B8, 0x80B8,
                0x90B8, 0xA0B8, 0xB0B8, 0xC0B8, 0xD0B8, 0xD1B8, 0xD2B8)
        },
        {
            "F19",
            (0x208E, 0x318E, 0x228E, 0x238E, 0x248E, 0x258E, 0x268E, 0x278E, 0x2882, 0x2982, 0x60B9, 0x70B9, 0x80B9,
                0x90B9, 0xA0B9, 0xB0B9, 0xC0B9, 0xD0B9, 0xD1B9, 0xD2B9)
        },
        {
            "F20",
            (0x308F, 0x418F, 0x228F, 0x238F, 0x248F, 0x258F, 0x268F, 0x278F, 0x2883, 0x2983, 0x60BA, 0x70BA, 0x80BA,
                0x90BA, 0xA0BA, 0xB0BA, 0xC0BA, 0xD0BA, 0xD1BA, 0xD2BA)
        },
        {
            "F21",
            (0x2090, 0x3029, 0x2290, 0x2390, 0x2490, 0x2590, 0x2690, 0x2790, 0x2884, 0x2984, 0x60BB, 0x70BB, 0x80BB,
                0x90BB, 0xA0BB, 0xB0BB, 0xC0BB, 0xD0BB, 0xD1BB, 0xD2BB)
        },
        {
            "F22",
            (0x2091, 0x302A, 0x2291, 0x2391, 0x2491, 0x2591, 0x2691, 0x2791, 0x2885, 0x2985, 0x60BC, 0x70BC, 0x80BC,
                0x90BC, 0xA0BC, 0xB0BC, 0xC0BC, 0xD0BC, 0xD1BC, 0xD2BC)
        },
        {
            "F23",
            (0x2092, 0x302B, 0x2292, 0x2392, 0x2492, 0x2592, 0x2692, 0x2792, 0x2886, 0x2986, 0x60BD, 0x70BD, 0x80BD,
                0x90BD, 0xA0BD, 0xB0BD, 0xC0BD, 0xD0BD, 0xD1BD, 0xD2BD)
        },
        {
            "F24",
            (0x2093, 0x302C, 0x2293, 0x2393, 0x2493, 0x2593, 0x2693, 0x2793, 0x2887, 0x2987, 0x60BE, 0x70BE, 0x80BE,
                0x90BE, 0xA0BE, 0xB0BE, 0xC0BE, 0xD0BE, 0xD1BE, 0xD2BE)
        },
        {
            "Unidentified",
            (0x2094, 0x2194, 0x2294, 0x2394, 0x2494, 0x2594, 0x2694, 0x2794, 0x2888, 0x2988, 0x60BF, 0x70BF, 0x80BF,
                0x90BF, 0xA0BF, 0xB0BF, 0xC0BF, 0xD0BF, 0xD1BF, 0xD2BF)
        },
    };

    /// <summary>
    ///   A pre-processor that converts a JSON representation of HTML DOM 3 keyboard codes (scan codes) into literal characters.
    /// </summary>
    /// <param name="input">The barcode data input in JSON format.</param>
    /// <param name="exceptions">A list of pre-processor exceptions.</param>
    /// <returns>The pre-processed barcode data input.</returns>
    // ReSharper disable once UnusedMember.Global
    public static string ConvertCodesToString(string? input, out IList<PreprocessorException>? exceptions) {
        var valuesJson = input ?? string.Empty;
        valuesJson = Regex.Unescape(valuesJson).Trim('"');
        var scannedData = JsonConvert.DeserializeObject<Dom3ReportedKeys[]>(valuesJson);
        var sb = new StringBuilder();
        var calledAltNumpad = false;
        var altNumpadValue = new StringBuilder();

#pragma warning disable SA1010 // Opening square brackets should be spaced correctly
        foreach (var eventCode in scannedData ?? []) {
            // Mask the upper bits representing NumLock, ScrollLock and Meta/OS
            var modifiers = eventCode.Modifiers & 31;

            sb.Append(modifiers switch {
                4 => HandleAltNumericKeypad(),
                20 => HandleAltNumericKeypad(),
                _ => HandleKeyCode()
            });

#pragma warning disable S1751
            continue;
#pragma warning restore S1751

            // The tuple uses nesting internally (see the .Rest property of ValueTuple<T1..T7,TRest).  There are two levels of
            // nesting in the tuple type.  Due to a Resharper issue, the second level of nesting may case Resharper to indicate
            // a cast error, but this is not the case, and the code compiles OK.
            string HandleKeyCode() {
                AppendAltNumpadValue();
                var (code,
                    shift,
                    ctrl,
                    _,
                    shiftCtrl,
                    shiftAlt,
                    altGr,
                    shiftAltGr,
                    shiftCtrlAlt,
                    ctrlAlt,
                    capital,
                    shiftCapital,
                    ctrlCapital,
                    altCapital,
                    shiftCtrlCapital,
                    shiftAltCapital,
                    altGrCapital,
                    shiftAltGrCapital,
                    shiftCtrlAltCapital,
                    ctrlAltCapital) = KeyCodes[eventCode.Code];
                return modifiers switch {
                    0 => ((char)code).ToInvariantString(),
                    1 => ((char)shift).ToInvariantString(),
                    2 => ((char)ctrl).ToInvariantString(),
                    3 => ((char)shiftCtrl).ToInvariantString(),
                    5 => ((char)shiftAlt).ToInvariantString(),
                    6 => ((char)ctrlAlt).ToInvariantString(),
                    7 => ((char)shiftCtrlAlt).ToInvariantString(),
                    8 => ((char)altGr).ToInvariantString(),
                    9 => ((char)shiftAltGr).ToInvariantString(),
                    16 => ((char)capital).ToInvariantString(),
                    17 => ((char)shiftCapital).ToInvariantString(),
                    18 => ((char)ctrlCapital).ToInvariantString(),
                    19 => ((char)shiftCtrlCapital).ToInvariantString(),
                    20 => ((char)altCapital).ToInvariantString(),
                    21 => ((char)shiftAltCapital).ToInvariantString(),
                    22 => ((char)ctrlAltCapital).ToInvariantString(),
                    23 => ((char)shiftCtrlAltCapital).ToInvariantString(),
                    24 => ((char)altGrCapital).ToInvariantString(),
                    25 => ((char)shiftAltGrCapital).ToInvariantString(),
                    _ => string.Empty
                };
            }

            string HandleAltNumericKeypad() {
                if ((eventCode.Modifiers & 32) == 32) {
                    return eventCode.Code switch {
                        "Numpad0" => GetNumpad((char)0x0030),
                        "Numpad1" => GetNumpad((char)0x0031),
                        "Numpad2" => GetNumpad((char)0x0032),
                        "Numpad3" => GetNumpad((char)0x0033),
                        "Numpad4" => GetNumpad((char)0x0034),
                        "Numpad5" => GetNumpad((char)0x0035),
                        "Numpad6" => GetNumpad((char)0x0036),
                        "Numpad7" => GetNumpad((char)0x0037),
                        "Numpad8" => GetNumpad((char)0x0038),
                        "Numpad9" => GetNumpad((char)0x0039),
                        _ => GetNonNumpad()
                    };
                }

                // Alt was pressed but NumLock is off
                AppendAltNumpadValue();
                return ((char)KeyCodes[eventCode.Code].alt).ToInvariantString();

                // Alt was pressed and NumLock is on
                string GetNumpad(char digit) {
                    calledAltNumpad = true;
                    altNumpadValue.Append(digit);
                    return string.Empty;
                }

                string GetNonNumpad() {
                    AppendAltNumpadValue();

                    AppendAltNumpadValue();
                    return string.Empty;
                }
            }

            void AppendAltNumpadValue() {
                if (!calledAltNumpad) return;
                calledAltNumpad = false;

                if (eventCode.Code == "AltLeft" && altNumpadValue.Length > 0) {
                    sb.Append((char)(int.Parse(altNumpadValue.ToString()) + 0x4E00));
                    modifiers = -1;
                }

                altNumpadValue.Clear();
            }
        }
#pragma warning restore SA1010 // Opening square brackets should be spaced correctly

#pragma warning disable IDE0028 // Simplify collection initialization
        exceptions = new List<PreprocessorException>();
#pragma warning restore IDE0028 // Simplify collection initialization
        var output = sb.ToString();
        int idx;

        for (idx = output.Length - 1; idx >= 0; idx--) {
            if (output[idx] == '\n' || output[idx] == '\r') {
                continue;
            }

            break;
        }

#if NET6_0_OR_GREATER
        return output[.. (idx + 1)];
#else
        return output.Substring(0, idx + 1);
#endif
    }
}